;
;	Cobalt CPU Microcode
;

revision 1

;
;	Macros
;

; NOTE If instructions were always encoded at least 2-bytes then
;	   the prefetch could also be 1 cycle
# FETCH1
	R WORD CS:$IPO II IPC1
END
	
# FETCH2
	R WORD CS:$IPO II IPC2
END

# FETCH4
	R WORD CS:$IPO II IPC4
END

;
;	0 OPERANDS
;

0 00000 NOP
	#FETCH1
	RTN
END

0 00001 RET
	#FETCH1
	R WORD SS:$SPO JMP
	SPO ADD 2 SPI
	RTN
END

0 00010 RTI
	#FETCH1
	SPO ADD 1 SPI			; Skip Exception Code
	R BYTE SS:$SPO FI		; Restore Flags
	SPO ADD 1 SPI
	R WORD SS:$SPO JMP		; Restore IP
	SPO ADD 2 SPI
	INTLATCH 0
	INTENLATCH 1
	RTN
END

0 00011 __IRQ
	#FETCH1					; + INTLATCH 1
	INTENLATCH 0
	IPO TBI					; Store IP
	SPO SUB 2 SPI
	W WORD SS:$SPO TBO
	SPO SUB 1 SPI			; Store Flags
	W BYTE SS:$SPO FO
	SPO SUB 1 SPI
	TAO TBI					; Store Exception Code (TODO TAO TBI xchg could be optimized)
	W BYTE SS:$SPO TBO
	R WORD $0 JMP			; Jump to IRQ Handler
	RTN
END

;; 0 00100 UNUSED

0 00101 BRK
	#FETCH1
	TAI 2
	INTLATCH 1
	RTN
END

0 00110 HLT
	#FETCH1
	HLT
	RTN
END

;
;	2 OPERANDS
;

2 11010 ILLEGAL REG REG	;; Raise InvalidOpcode Exception
	#FETCH2
	TAI	4 IPC2					; TODO Only 1 usage of the const4 microcode
	INTLATCH 1
	RTN
END

; OOOOOOAA ABBBRRRR XXXXRRRR
2 00111 MOV REG REG
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	RSO2 RSI1
	RTN
END

; OOOOOOAA ABBBRRRR CCCCCCCC CCCCCCCC 
2 00111 MOV REG IMM16
	#FETCH2
	R WORD CS:$IPO RSI1 IPC2
	RTN
END

; OOOOOOAA ABBBRRRR XXXXRRRR CCCCCCCC CCCCCCCC
2 00111 MOV REG [REG+IMM16]
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	R WORD CS:$IPO TBI IPC2
	RSO2 TAI
	TAO SUB TBO TAI			; TODO Check if possible on real hardware
	R WORD DS:$TAO RSI1
	RTN
END
2 00111 MOV REG BYTE[REG+IMM16]
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	R WORD CS:$IPO TBI IPC2
	RSO2 TAI
	TAO SUB TBO TAI			; TODO Check if possible on real hardware
	R BYTE DS:$TAO RSI1
	RTN
END

2 00111 MOV REG [IMM16]
	#FETCH2
	R WORD CS:$IPO TAI
	R WORD DS:$TAO RSI1 IPC2
	RTN
END
2 00111 MOV REG BYTE[IMM16]
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R BYTE DS:$TAO RSI1
	RTN
END

;; ; EXPERIMENT ;;;;;;
# FETCH_OPERAND2
	R BYTE CS:$IPO OI IPC1
END
; REGISTER1 -> SIZE, SEL_VALUE, REG_VALUE
; OPERAND   -> SIZE (BYTE | WORD)
; OOOOOOAA ABBBRRRR CCCCCCCC CCCCCCCC CCCCCCCC
2 00111 MOV BYTE|WORD[SEG:IMM] IMM8
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R BYTE CS:$IPO TBI IPC1				; Read Operand 2
	W BYWO SEG1:$TAO TBO
	RTN
END
;; ; EXPERIMENT ;;;;;;

; OOOOOOAA ABBBXXXX CCCCCCCC CCCCCCCC XXXXRRRR
2 00111 MOV [IMM16] REG
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R BYTE CS:$IPO OI IPC1
	W WORD DS:$TAO RSO2
	RTN
END

2 00111 MOV BYTE[IMM16] REG
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R BYTE CS:$IPO OI IPC1
	W BYTE DS:$TAO RSO2
	RTN
END

; OOOOOOAA ABBBXXXX CCCCCCCC CCCCCCCC CCCCCCCC CCCCCCCC
2 00111 MOV [IMM16] IMM16
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R WORD CS:$IPO TBI IPC2
	W WORD DS:$TAO TBO
	RTN
END

; OOOOOOAA ABBBXXXX CCCCCCCC CCCCCCCC CCCCCCCC CCCCCCCC ;; TODO The hi-byte is not used, needs fixed
2 00111 MOV BYTE[IMM16] IMM16
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R WORD CS:$IPO TBI IPC2
	W BYTE DS:$TAO TBO
	RTN
END

;; OBA
; OOOOOOAA ABBBRRRR CBCCCCCC CBCCCCCC CACCCCCC CACCCCCC
2 00111 MOV BA [IMM16] [REG+IMM16]
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI
	R WORD DS:$TAO TBI			; tB = [REG+IMM16]
	R WORD CS:$IPO TAI IPC2
	W WORD DS:$TAO TBO			; [tA] = tB
	RTN
END

;; OBA
; OOOOOOAA ABBBXXXX CBCCCCCC CBCCCCCC CACCCCCC CACCCCCC
2 00111 MOV BA [IMM16] [IMM16]
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	R WORD DS:$TAO TBI
	R WORD CS:$IPO TAI IPC2
	W WORD DS:$TAO TBO
	RTN
END

; OOOOOOAA ABBBRRRR CCCCCCCC CCCCCCCC XXXXRRRR
2 00111 MOV [REG+IMM16] REG
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI
	R BYTE CS:$IPO OI IPC1
	W WORD DS:$TAO RSO2
	RTN
END
2 00111 MOV BYTE[REG+IMM16] REG
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI
	R BYTE CS:$IPO OI IPC1
	W BYTE DS:$TAO RSO2
	RTN
END

2 00111 MOV BYTE[REG+IMM16] IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI
	R WORD CS:$IPO TBI IPC2
	W BYTE DS:$TAO TBO
	RTN
END

;; OBA
; OOOOOOAA ABBBRRRR CBCCCCCC CBCCCCCC XXXXRRRR CACCCCCC CACCCCCC
2 00111 MOV BA [REG+IMM16] [REG+IMM16]
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI
	R WORD DS:$TAO TBI			; tB = [REG+IMM16] ; GOOD
	R BYTE CS:$IPO OI IPC1
	R WORD CS:$IPO TAI IPC2
	;;TAO SUB RSO2 TAI ; tA -> tB, RSO2 -> tA
	;;TAO SUB TBO TAI
	;; RSO2 TCI
	;; TAO SUB TCO TAI
	;RSO2 TAO SUB TAI			; tA = REG+IMM16 ; BUG TAO - RSO2 results in wrong value
	W WORD DS:$TAO TBO			; [tA] = tB
	RTN
END

2 01001 ADD REG REG
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	RSO1 RSO2 ADD TAI FI
	TAO RSI1
	RTN
END

; OOOOOOAA ABBBRRRR CCCCCCCC CCCCCCCC
2 01001 ADD REG IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO ADD TAI FI			; NOTE 20k extra instructions can execute per second if I could RSI1 here
	TAO RSI1
	RTN
END

; OOOOOOAA ABBBRRRR XXXXRRRR CCCCCCCC CCCCCCCC
2 01001 ADD REG [REG+IMM16]
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	R WORD CS:$IPO TAI IPC2
	RSO2 TAO SUB TAI			; TODO Check if possible on real hardware
	R WORD DS:$TAO TBI
	RSO1 TBO ADD TAI FI
	TAO RSI1
	RTN
END

; TODO ADD

2 01010 SUB REG REG
	#FETCH2
	R BYTE CS:$IPO OI IPC1
	RSO1 RSO2 SUB TAI
	TAO RSI1 ; Why not RSI1 directly?
	RTN
END

2 01010 SUB REG IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB TAI FI
	TAO RSI1
	RTN
END
; TODO SUB

; OOOOOOAA ABBBRRRR XXXXRRRR
2 01100 MUL REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO2 TAI
	RSO1 TBI
A:	RSO1 ADD TBO RSI1
	TAO SUB 1 TAI FI
	JNF @A
	RSO1 ADD TBO RSI1 FI
	RTN
END
; TODO MUL

; 2 01101 DIV REG REG
; 	#FETCH2
; 	R CS:$IPO OI IPC1
; 	RSO1 RSO2 DIV TAI
; 	TAO RSI1
; 	RTN
; END
; TODO DIV

; 2 01110 MOD REG REG
; 	#FETCH2
; 	R CS:$IPO OI IPC1
; 	RSO1 RSO2 MOD TAI
; 	TAO RSI1
; 	RTN
; END
; TODO MOD

2 10010 SHR REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 SHR RSI1
	RTN
END
; TODO SHR

2 10011 SHL REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 SHL RSI1
	RTN
END
; TODO SHL

2 10100 AND REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 AND RSI1
	RTN
END
; TODO AND

2 10100 AND REG IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO AND RSI1 FI
	RTN
END
; TODO AND

2 10101 OR REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 OR RSI1
	RTN
END
; TODO OR

2 10110 XOR REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 XOR RSI1
	RTN
END
; TODO XOR

2 11000 CMP REG REG
	#FETCH2
	R WORD CS:$IPO OI IPC1
	RSO1 RSO2 SUB FI
	RTN
END

2 11000 CMP REG IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO SUB FI
	RTN
END
; TODO CMP

2 11001 BIT REG REG
	#FETCH2
	R CS:$IPO OI IPC1
	RSO1 RSO2 AND FI
	RTN
END

2 11001 BIT REG IMM16
	#FETCH2
	R WORD CS:$IPO TBI IPC2
	RSO1 TBO AND FI
	RTN
END
; TODO BIT

;
;	1 OPERAND
;

; OOOOOOAA AXXXXXXX CCCCCCCC CCCCCCCC
1 00000 CALL IMM16 *
	#FETCH2
	R WORD CS:$IPO TAI IPC2
	IPO TBI
	SPO SUB 2 SPI
	W WORD SS:$SPO TBO
	TAO JMP
	RTN
END

; OOOOOOAA AXXXRRRR
1 00001 PUSH REG *
	#FETCH2
	RSO1 TBI
	SPO SUB 2 SPI
	W WORD SS:$SPO TBO
	RTN
END

1 00010 JMP IMM16 *
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END

1 00011 JZ IMM16 *
	#FETCH4
	RTN
END

1 00011 JZ IMM16 +ZF -CF -SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 00011 JZ IMM16 +ZF +CF -SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 00011 JZ IMM16 +ZF -CF +SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 00011 JZ IMM16 +ZF +CF +SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END

1 01101 JNZ IMM16 *
	#FETCH4
	RTN
END

1 01101 JNZ IMM16 -ZF -CF -SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 01101 JNZ IMM16 -ZF +CF -SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 01101 JNZ IMM16 -ZF -CF +SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END
1 01101 JNZ IMM16 -ZF +CF +SF
	#FETCH2
	R WORD CS:$IPO JMP
	RTN
END

1 10000 POP REG *
	#FETCH2
	R WORD SS:$SPO RSI1
	SPO ADD 2 SPI
	RTN
END

1 10001 INT IMM16 *
	#FETCH2
	R WORD CS:$IPO TAI
	INTLATCH 1
	RTN
END

1 10010 SIE IMM16 *
	#FETCH2
	R WORD CS:$IPO INTENLATCH IPC2
	RTN
END